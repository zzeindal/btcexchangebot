const { Key, Keyboard } = require("telegram-keyboard");
const { $user, $ad, $deal, $cheque, $admin, $advertisement } = require("../connection/mongoose");
const { getUser, support, split_number, btc_convert } = require("./utils");
const moment = require("moment");
const fromExponential = require('from-exponential');

function go_to_main_keyboard() {
    const keyboard = Keyboard.make([
        "‚Ü©Ô∏è –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"
    ]).reply();

    return keyboard;
}

function back_keyboard(where) {
    const keyboard = Keyboard.make([
        Key.callback("üîô –ù–∞–∑–∞–¥", where)
    ]).inline();

    return keyboard
}

/*
async function main_keyboard(ctx) {
    const user = await getUser(ctx.from.id);

    var data = [
        Key.callback("üè¶ –ë–∞–ª–∞–Ω—Å", "balance"),
        Key.callback("üìï –ö—É–ø–∏—Ç—å BTC", "buy"),
        Key.callback("üìò –ü—Ä–æ–¥–∞—Ç—å BTC", "sell"),
        Key.callback("üóÉÔ∏è –ú–æ–π –∞–∫–∫–∞—É–Ω—Ç", "profile"),
        Key.callback("üåê –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ", "more")
    ]

    const deals = await $deal.find({ 
        ownerId: user.id,

        $or: [ 
            { status: 0 }, 
            { status: 1 },
            { status: 2 }
        ]
    })

    if(deals.length !== 0) {
        data.push(Key.callback("üöÄ –û—Ç–∫—Ä—ã—Ç—ã–µ —Å–¥–µ–ª–∫–∏", "open_deals"))
    }

    const keyboard = Keyboard.make(data, { pattern: [1,2,2,1 ]}).inline();

    return keyboard;
}
*/

async function main_keyboard(ctx) {
    const user = await getUser(ctx.from.id);

    var data = [
        "üè¶ –ë–∞–ª–∞–Ω—Å",
        "üìï –ö—É–ø–∏—Ç—å BTC",
        "üìò –ü—Ä–æ–¥–∞—Ç—å BTC",
        "üóÉÔ∏è –ú–æ–π –∞–∫–∫–∞—É–Ω—Ç",
        "üåê –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ"
    ]

    const deals = await $deal.find({
        ownerId: user.id,

        $or: [
            { status: 0 },
            { status: 1 },
            { status: 2 }
        ]
    })

    data.push("üöÄ –û—Ç–∫—Ä—ã—Ç—ã–µ —Å–¥–µ–ª–∫–∏")

    /*
    if (deals.length !== 0) {
        data.push("üöÄ –û—Ç–∫—Ä—ã—Ç—ã–µ —Å–¥–µ–ª–∫–∏")
    }
    */
    const keyboard = Keyboard.make(data, { pattern: [1, 2, 2, 1] }).reply();

    return keyboard;
}

function more_keyboard() {
    const keyboard = Keyboard.make([
        Key.url("üõ° –¢–µ—Ö. –ü–æ–¥–¥–µ—Ä–∂–∫–∞", "https://t.me/BIT_Flash_admin"),
        Key.url("üóì –ù–∞—à –∫–∞–Ω–∞–ª", "https://t.me/Flash_ChangeNews")
        //Key.callback("üîô –ù–∞–∑–∞–¥", "main")
    ], { columns: 1 }).inline();

    return keyboard;
}

async function profile_keyboard(senderId, accountId) {
    const user = await $user.findOne({ id: accountId });
    var data = [];

    data.push(Key.callback("üì±–ê–∫—Ç–∏–≤–Ω—ã–µ —Å–µ—Å—Å–∏–∏", "active_sessions"));

    if(!user.password) {
        data.push(Key.callback("üîê –ó–∞—â–∏—Ç–∏—Ç–µ –∞–∫–∫–∞—É–Ω—Ç –ø–∞—Ä–æ–ª–µ–º!", "create_password_profile"));
    } else {
        data.push(Key.callback("üìù –ò–∑–º–µ–Ω–∏—Ç—å –ø–∞—Ä–æ–ª—å", "change_password"))
    }

    data.push(Key.callback("üñ®Ô∏è –ü–æ–ª—É—á–∏—Ç—å –æ—Ç—á—ë—Ç", "get_my_report"));

    if(senderId === accountId) {
        data.push(Key.callback("üîÑ –í–æ–π—Ç–∏ –≤ –¥—Ä—É–≥–æ–π –∞–∫–∫–∞—É–Ω—Ç", "sign_in"))
    } else {
        data.push(Key.callback("‚Ü©Ô∏è –í—ã–π—Ç–∏", "sign_out"))
    }

    //data.push(Key.callback("üîô –ù–∞–∑–∞–¥", "main"));

    const keyboard = Keyboard.make(data, { columns: 1 }).inline();
    
    return keyboard;
}

async function balance_keyboard(ctx) {
    const user = await getUser(ctx.from.id);
    var data = [];
    data.push(Key.callback("üì• –í–Ω–µ—Å—Ç–∏", "insert"));
    data.push(Key.callback("üì§ –í—ã–≤–µ—Å—Ç–∏", "withdrawal"));
    data.push(Key.callback("üßæ BTC —á–µ–∫", "cheque"));

    if(!user.password) {
        data.push(Key.callback("üîê –ó–∞—â–∏—Ç–∏—Ç–µ –∞–∫–∫–∞—É–Ω—Ç –ø–∞—Ä–æ–ª–µ–º!", "create_password_balance"));
    }

    //data.push(Key.callback("üîô –ù–∞–∑–∞–¥", "main"));
    const keyboard = Keyboard.make(data, { pattern: [2,1,1,1] }).inline();

    return keyboard;
}

function insert_keyboard() {
    const keyboard = Keyboard.make([
        Key.callback("üîÅ –û–±–Ω–æ–≤–∏—Ç—å –∞–¥—Ä–µ—Å", "insert"),
        Key.callback("üîô –ù–∞–∑–∞–¥", "balance")
    ], { columns: 1 }).inline();

    return keyboard;
};

function set_password_keyboard(back) {
    const keyboard = Keyboard.make([
        Key.callback("‚úçÔ∏è –°–æ–∑–¥–∞—Ç—å –ø–∞—Ä–æ–ª—å", `set_password_${back}`),
        Key.callback("üîô –ù–∞–∑–∞–¥", back)
    ], { columns: 1 }).inline();

    return keyboard;
}

function set_password_scene_generate_password(back) {
    const keyboard = Keyboard.make([
        Key.callback("–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –ø–∞—Ä–æ–ª—å", "generate"),
        Key.callback("üîô –ù–∞–∑–∞–¥", back)
    ], { columns: 1 }).inline();

    return keyboard;
}

function revoke_session_keyboard(id) {
    const keyboard = Keyboard.make([
        Key.callback("üìµ –°–±—Ä–æ—Å–∏—Ç—å —Å–µ—Å—Å–∏—é", `cancel_session_change_password ${id}`)
    ]).inline();

    return keyboard;
}

function change_password_keyboard() {
    const keyboard = Keyboard.make([
        Key.callback("üîÑ –°–º–µ–Ω–∏—Ç—å –ø–∞—Ä–æ–ª—å", "change_password")
    ], { columns: 1 }).inline();

    return keyboard;
}

function cancel_session_error_keyboard() {
    const keyboard = Keyboard.make([
        Key.callback("‚Ü©Ô∏è –í—ã–π—Ç–∏", "sign_out"),
        Key.callback("üîô –ù–∞–∑–∞–¥", "active_sessions")
    ], { columns: 1 }).inline();

    return keyboard;
}

function cancel_session_keyboard(id) {
    const keyboard = Keyboard.make([
        Key.callback("–î–∞", `cancel_session_yes ${id}`),
        Key.callback("–ù–µ—Ç", `active_sessions`)
    ]).inline();

    return keyboard;
}

function cancel_session_change_password_keyboard(id) {
    const keyboard = Keyboard.make([
        Key.callback("–î–∞", `cancel_session_change_password_yes ${id}`),
        Key.callback("–ù–µ—Ç", `active_sessions`)
    ]).inline();

    return keyboard;
}

async function sessions_list_keyboard(id) {
    const user = await getUser(id);

    var data = [];
    for (const session of user.activeSessions) {
        const checking = await $user.findOne({ id: session })
        data.push(Key.callback(checking.username ? checking.username : session, `cancel_session ${session}`))
    }

    data.push(Key.callback("üîô –ù–∞–∑–∞–¥", "profile"));
    const keyboard = Keyboard.make(data, { columns: 1 }).inline();
    return keyboard;
}

function sign_out_keyboard() {
    const keyboard = Keyboard.make([
        Key.callback("–î–∞", "sign_out_yes"),
        Key.callback("–ù–µ—Ç", "profile")
    ]).inline();

    return keyboard;
}

async function get_ads_keyboard(purpose) {
    var ads;

    if(purpose === "sell") {
        ads = await $ad.find({ active: true, sell_active: true });
        ads.sort((a, b) => {
            if (a.selling_rate > b.selling_rate) {
                return -1;
            }
            if (a.selling_rate < b.selling_rate) {
                return 1;
            }
            return 0;
        });

    } else {
        ads = await $ad.find({ active: true, buy_active: true });
        ads.sort((a, b) => {
            if (a.buying_rate < b.buying_rate) {
                return -1;
            }
            if (a.buying_rate > b.buying_rate) {
                return 1;
            }
            return 0;
        });
    }


    var data = [];

    for (const ad of ads) {
        data.push(Key.callback(`${ad.method} - ${split_number(`${Number(ad[purpose + 'ing_rate']).toFixed(2)}`)}`, `check_deal ${ad.uid} ${purpose}`))
    }

    //data.push(Key.callback("üîô –ù–∞–∑–∞–¥", "main"));

    const keyboard = Keyboard.make(data, { columns: 1 }).inline();

    return keyboard;
}

async function open_deals_keyboard(user) {
    const deals = await $deal.find({ 
        ownerId: user.id,

        $or: [ 
            { status: 0 }, 
            { status: 1 },
            { status: 2 },
            { status: 5 }
        ]
    })

    var data = [];

    for (const deal of deals) {
        data.push(Key.callback(`#${deal.uid} ${deal.method === "buy" ? "–ü—Ä–æ–¥–∞–∂–∞" : "–ü–æ–∫—É–ø–∫–∞"} ${fromExponential(deal.amount).replace(/0*$/,"")} BTC (${deal.amount_in_rub} RUB)`, `deal_more ${deal.uid}`))
    }

    //data.push(Key.callback("üîô –ù–∞–∑–∞–¥", "main"));

    const keyboard = Keyboard.make(data, { columns: 1 }).inline();
    return keyboard;
}

function check_deal_keyboard(uid, purpose) {
    const keyboard = Keyboard.make([
        Key.callback("–ù–∞—á–∞—Ç—å —Å–¥–µ–ª–∫—É", `start_deal ${uid} ${purpose}`),
        Key.callback("üîô –ù–∞–∑–∞–¥", purpose)
    ], { columns: 1 }).inline();

    return keyboard;
}

function deal_scene_keyboard(uid, method) {
    const keyboard = Keyboard.make([
        Key.callback("–í–Ω–µ—à–Ω–∏–π –∫–æ—à–µ–ª–µ–∫", "another"),
        Key.callback("–ë–∞–ª–∞–Ω—Å –±–æ—Ç–∞", "bot"),
        Key.callback("üîô –ù–∞–∑–∞–¥", `check_deal ${uid} ${method}`)
    ], { columns: 1 }).inline();

    return keyboard;
}

async function deal_more_keyboard(uid) {
    const deal = await $deal.findOne({ uid: uid })
    var data = [];
    if (deal.status === 0) {
        data.push(Key.callback("–û–ø–ª–∞—á–µ–Ω–æ", `deal_paid_${deal.method} ${deal.uid}`));
        data.push(Key.callback("‚õî –û—Ç–º–µ–Ω–∏—Ç—å —Å–¥–µ–ª–∫—É", `deal_cancel ${deal.uid}`))
    }
    data.push(Key.url("üõ°Ô∏è –¢–µ—Ö. –ü–æ–¥–¥–µ—Ä–∂–∫–∞", `https://t.me/${support}`));
    data.push(Key.callback("üîô –ù–∞–∑–∞–¥", "open_deals"));

    const keyboard = Keyboard.make(data, { columns: 1 }).inline();
    return keyboard;
}

function deal_paid_keyboard(purpose, uid) {
    const keyboard = Keyboard.make([
        Key.callback("–î–∞", `deal_ok_paid_${purpose} ${uid}`),
        Key.callback("–ù–µ—Ç", "close_info")
    ]).inline();

    return keyboard;
}

function deal_cancel_keyboard(uid) {
    const keyboard = Keyboard.make([
        Key.callback("–î–∞", `deal_cancel_ok ${uid}`),
        Key.callback("–ù–µ—Ç", "close_info")
    ]).inline();

    return keyboard;
}

function agent_support_keyboard() {
    const keyboard = Keyboard.make([
        Key.url("üõ°Ô∏è –¢–µ—Ö. –ü–æ–¥–¥–µ—Ä–∂–∫–∞", `https://t.me/${support}`)
    ], { columns: 1 }).inline();

    return keyboard;
}

function transfer_done_keyboard(uid, purpose) {
    const keyboard = Keyboard.make([
        Key.callback("–û–ø–ª–∞—á–µ–Ω–æ", `deal_paid_${purpose} ${uid}`),
        Key.callback("‚õî –û—Ç–º–µ–Ω–∏—Ç—å —Å–¥–µ–ª–∫—É", `deal_cancel ${uid}`),
        Key.url("üõ°Ô∏è –¢–µ—Ö. –ü–æ–¥–¥–µ—Ä–∂–∫–∞", `https://t.me/${support}`)
    ], { columns: 1 }).inline();

    return keyboard;
}

function admin_i_see_keyboard() {
    const keyboard = Keyboard.make([
        Key.callback("–Ø –≤–∏–∂—É", "close_info")
    ]).inline();

    return keyboard;
}

async function cheque_keyboard(id) {
    const user = await getUser(id)
    const cheques = await $cheque.find({ ownerId: user.id, active: true });

    const keyboard = Keyboard.make([
        Key.callback("üì© –°–æ–∑–¥–∞—Ç—å BTC —á–µ–∫", "create_cheque"),
        Key.callback(`üìë –ê–∫—Ç–∏–≤–Ω—ã–µ —á–µ–∫–∏ - ${cheques.length}`, "my_active_cheques"),
        Key.callback("üîô –ù–∞–∑–∞–¥", "balance")
    ], { columns: 1 }).inline();

    return keyboard;
}

function create_cheque_keyboard() {
    const keyboard = Keyboard.make([
        "RUB",
        "BTC",
        Key.callback("üîô –ù–∞–∑–∞–¥", "cheque")
    ], { columns: 1 }).inline();

    return keyboard;
}

async function my_active_cheques_keyboard(id) {
    const user = await getUser(id);
    const cheques = await $cheque.find({ ownerId: user.id, active: true });
    var data = [];
    
    for (const cheque of cheques) {
        const rub = await btc_convert(cheque.amount);

        data.push(Key.callback(`${fromExponential(cheque.amount).replace(/0*$/, "") } BTC (${rub.toFixed(2)} RUB)`, `check_cheque ${cheque.uid}`));
        data.push(Key.callback("–£–¥–∞–ª–∏—Ç—å", `delete_cheque ${cheque.uid}`))
    }

    data.push(Key.callback("üîô –ù–∞–∑–∞–¥", "cheque"));

    const keyboard = Keyboard.make(data, { columns: 2 }).inline();
    return keyboard;
}

function delete_cheque_request_keyboard(uid) {
    const keyboard = Keyboard.make([
        Key.callback("–î–∞", `delete_cheque_ok ${uid}`),
        Key.callback("–ù–µ—Ç", "my_active_cheques")
    ]).inline();

    return keyboard;
}

function banned_keyboard() {
    const keyboard = Keyboard.make([
        Key.url("üõ°Ô∏è –¢–µ—Ö. –ü–æ–¥–¥–µ—Ä–∂–∫–∞", `https://t.me/${support}`)
        //Key.callback("üîô –ù–∞–∑–∞–¥", "main")
    ], { columns: 1 }).inline();

    return keyboard;
}

function withdrawal_max_keyboard(amount) {
    const keyboard = Keyboard.make([
        Key.callback(`–í—ã–≤–µ—Å—Ç–∏ –º–∞–∫—Å–∏–º—É–º (${fromExponential(Number(amount).toFixed(8)).replace(/0*$/, "")} BTC)`, "withdrawal_max"),
        Key.callback("üîô –ù–∞–∑–∞–¥", "back")
    ], { columns: 1 }).inline();

    return keyboard;
}

function withdrawal_scene_ask_speed_keyboard() {
    const keyboard = Keyboard.make([
        Key.callback("–ú–µ–¥–ª–µ–Ω–Ω–∞—è (~1 —á–∞—Å)", "speed 0"),
        Key.callback("–°—Ä–µ–¥–Ω—è—è (~30 –º–∏–Ω—É—Ç)", "speed 1"),
        Key.callback("‚ö°Ô∏è –í—ã—Å–æ–∫–∞—è (~5 –º–∏–Ω—É—Ç)", "speed 2"),
        Key.callback("üîô –ù–∞–∑–∞–¥", "back")
    ], { pattern: [2,1,1] }).inline();

    return keyboard;
}











////////////////////////////////////////////// ADMIN \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\
function admin_keyboard() {
    const keyboard = Keyboard.make([
        Key.callback("–ë–∞–ª–∞–Ω—Å", "admin_balance"),
        Key.callback("–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", "admin_stats"),
        Key.callback("–°–ø–æ—Å–æ–±—ã –æ–ø–ª–∞—Ç –∏ –ª–∏–º–∏—Ç—ã", "admin_methods"),
        Key.callback("–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ", "admin_more"),
        Key.callback("–°–∫—Ä—ã—Ç—å", "close_info")
    ], { columns: 1 }).inline();

    return keyboard;
}

async function admin_order_keyboard(uid) {
    const deals = await $deal.find({ ad_uid: uid });

    var data = [];
    for (const deal of deals) {
        var method_text = deal.method == "sell" ? "üîµ" : "üü¢";
        var date = moment(deal.created_at).format('HH:mm');
        var emoji = '';
        if (deal.status === 3) {
            emoji = "‚úÖ"
        } else if (deal.status === 4) {
            emoji = "‚ùå"
        } else if (deal.method === "sell" && deal.status === 2) {
            emoji = "üîÑ"
        } else if (deal.method === "buy" && deal.status === 1) {
            emoji = "üîÑ"
        }

        //data.push(Key.callback(`${method_text} ${deal.amount_in_rub} RUB - ${deal.rate} - ${date} ${emoji}`, `admin_check_order ${deal.uid}`));
        data.push(`${method_text} #${deal.uid} - ${deal.amount_in_rub} - ${deal.rate} - ${date} ${emoji}`)
    }

    return data;
}

async function admin_check_order_keyboard(uid) {
    const deal = await $deal.findOne({ uid: uid });
    var keyboard;

    if (deal.method === "sell") {
        if (deal.status === 1) {
            keyboard = Keyboard.make([
                Key.callback("–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –ø–æ–ª—É—á–µ–Ω–∏–µ", `admin_order_transfer_done ${deal.uid}`),
                Key.callback("–û—Ç–º–µ–Ω–∏—Ç—å", `admin_order_cancel ${deal.uid}`),
                Key.callback("üîô –ù–∞–∑–∞–¥", "/order")
            ], { columns: 1 }).inline();
        } else if (deal.status !== 3 && deal.status !== 4) {
            keyboard = Keyboard.make([
                Key.callback("–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", `admin_order_done ${deal.uid}`),
                Key.callback("–û—Ç–º–µ–Ω–∏—Ç—å", `admin_order_cancel ${deal.uid}`),
                Key.callback("üîô –ù–∞–∑–∞–¥", "/order")
            ], { columns: 1 }).inline();
        }
    } else {
        if(deal.status !== 3 && deal.status !== 4) {
            keyboard = Keyboard.make([
                Key.callback("–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", `admin_order_done ${deal.uid}`),
                Key.callback("–û—Ç–º–µ–Ω–∏—Ç—å", `admin_order_cancel ${deal.uid}`),
                Key.callback("üîô –ù–∞–∑–∞–¥", "/order")
            ], { columns: 1 }).inline();
        } else {
            keyboard = Keyboard.make([
                Key.callback("üîô –ù–∞–∑–∞–¥", "/order")
            ], { columns: 1 }).inline();
        }
    }

    return keyboard;
}

function admin_order_done_keyboard(uid) {
    const keyboard = Keyboard.make([
        Key.callback("–î–∞", `admin_order_done_ok ${uid}`),
        Key.callback("–ù–µ—Ç", `admin_check_order ${uid}`)
    ]).inline();

    return keyboard;
}


function admin_order_transfer_done_keyboard(uid) {
    const keyboard = Keyboard.make([
        Key.callback("–î–∞", `admin_order_transfer_done_ok ${uid}`),
        Key.callback("–ù–µ—Ç", `admin_check_order ${uid}`)
    ]).inline();

    return keyboard;
}

function admin_order_cancel_keyboard(uid) {
    const keyboard = Keyboard.make([
        Key.callback("–î–∞", `admin_order_cancel_ok ${uid}`),
        Key.callback("–ù–µ—Ç", `admin_check_order ${uid}`)
    ]).inline();

    return keyboard;
}


function admin_stats_keyboard() {
    const keyboard = Keyboard.make([
        Key.callback("–ü–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º", "admin_stats_users"),
        Key.callback("–ü–æ –æ–±–º–µ–Ω–∞–º", "admin_stats_exchange"),
        Key.callback("–ü–æ –∞—É–¥–∏—Ç–æ—Ä–∏–∏", "admin_stats_audience"),
        Key.callback("üîô –ù–∞–∑–∞–¥", "admin")
    ], { columns: 1 }).inline();

    return keyboard;
}

async function admin_stats_registration_keyboard() {
    const users = await $user.find();

    var text = [];
    var data = [];

    for(const user of users) {
        var year = moment(user.registration_date).year();
        if(!text.includes(year)) {
            text.push(year);
        }
    }

    for(const elem of text) {
        data.push(Key.callback(elem, `admin_stats_registration ${elem}`))
    }

    data.push(Key.callback("üîô –ù–∞–∑–∞–¥", "admin_stats_audience"));
    const keyboard = Keyboard.make(data, { columns: 2 }).inline();
    
    return keyboard;
}

function admin_stats_registration_byYear_keyboard(year) {
    const keyboard = Keyboard.make([
        Key.callback("–Ø–Ω–≤", `admin_stats_registration ${year} 0`),
        Key.callback("–§–µ–≤", `admin_stats_registration ${year} 1`),
        Key.callback("–ú–∞—Ä—Ç", `admin_stats_registration ${year} 2`),
        Key.callback("–ê–ø—Ä", `admin_stats_registration ${year} 3`),
        Key.callback("–ú–∞–π", `admin_stats_registration ${year} 4`),
        Key.callback("–ò—é–Ω—å", `admin_stats_registration ${year} 5`),
        Key.callback("–ò—é–ª—å", `admin_stats_registration ${year} 6`),
        Key.callback("–ê–≤–≥", `admin_stats_registration ${year} 7`),
        Key.callback("–°–µ–Ω", `admin_stats_registration ${year} 8`),
        Key.callback("–û–∫—Ç", `admin_stats_registration ${year} 9`),
        Key.callback("–ù–æ—è", `admin_stats_registration ${year} 10`),
        Key.callback("–î–µ–∫", `admin_stats_registration ${year} 11`),
        Key.callback("üîô –ù–∞–∑–∞–¥", `admin_stats_registration`)
    ], { columns: 4 }).inline();

    return keyboard;
}

function admin_stats_users_keyboard() {
    const keyboard = Keyboard.make([
        Key.callback("–ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö", "get_all_users"),
        Key.callback("–ü–æ–∏—Å–∫ –ø–æ id", "get_user_byId"),
        Key.callback("üîô –ù–∞–∑–∞–¥", "admin_stats")
    ], { columns: 1 }).inline();

    return keyboard;
}

function admin_stats_audience_keyboard() {
    const keyboard = Keyboard.make([
        Key.callback("–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–π", "admin_stats_registration"),
        Key.callback("–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Ä–µ–∫–ª–∞–º—ã", "admin_advertisement"),
        Key.callback("üîô –ù–∞–∑–∞–¥", "admin_stats")
    ], { columns: 1 }).inline();

    return keyboard;
}

function get_all_users_keyboard() {
    const keyboard = Keyboard.make([
        Key.callback("–ü–æ –±–∞–ª–∞–Ω—Å—É", "get_all_users_byBalance"),
        Key.callback("–ü–æ —Å—É–º–º–µ —Å–¥–µ–ª–æ–∫", "get_all_users_byAmount"),
        Key.callback("–ü–æ –≤—Ä–µ–º–µ–Ω–∏ –ø–æ—Å–ª–µ–¥–Ω–µ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏", "get_all_users_byOnline"),
        Key.callback("üîô –ù–∞–∑–∞–¥", "admin_stats_users")
    ], { columns: 1 }).inline();

    return keyboard;
}

function admin_get_file_all_users_keyboard(purpose) {
    const keyboard = Keyboard.make([
        Key.callback("–ü–æ–ª—É—á–∏—Ç—å —Ñ–∞–π–ª", `get_file_all_users ${purpose}`),
        Key.callback("üîô –ù–∞–∑–∞–¥", "get_all_users")
    ], { columns: 1 }).inline();

    return keyboard;
}

function admin_stats_exchange_keyboard() {
    const keyboard = Keyboard.make([
        Key.callback("–î—Ä—É–≥–∏–µ –¥–∞—Ç—ã", "admin_stats_exchange_other"),
        Key.callback("–ü–æ–∏—Å–∫ –ø–æ ID –∑–∞—è–≤–∫–µ", "get_exchange_byId"),
        Key.callback("üîô –ù–∞–∑–∞–¥", "admin_stats")
    ], { columns: 1 }).inline();

    return keyboard;
}

async function admin_stats_exchange_other_keyboard() {
    const deals = await $deal.find();

    var text = [];
    var data = [];

    for(const deal of deals) {
        var year = moment(deal.created_at).year();

        if(!text.includes(year)) {
            text.push(year);
        }
    }

    for(const elem of text) {
        data.push(Key.callback(elem, `admin_stats_exchange_year ${year}`))
    }

    data.push(Key.callback("üîô –ù–∞–∑–∞–¥", "admin_stats_exchange"));
    const keyboard = Keyboard.make(data, { columns: 2 }).inline();
    
    return keyboard;
}

async function admin_order_find_keyboard() {
    const deals = await $deal.find();

    var text = [];
    var data = [];

    for (const deal of deals) {
        var year = moment(deal.created_at).year();

        if (!text.includes(year)) {
            text.push(year);
        }
    }

    for (const elem of text) {
        data.push(Key.callback(elem, `admin_order_find_year ${year}`))
    }

    data.push(Key.callback("üîô –ù–∞–∑–∞–¥", "/order"));
    const keyboard = Keyboard.make(data, { columns: 2 }).inline();

    return keyboard;
}

function admin_get_file_deal_byYear_keyboard(year, month, day) {
    const keyboard = Keyboard.make([
        Key.callback("–ü–æ–ª—É—á–∏—Ç—å —Ñ–∞–π–ª", `get_file_deals_byYear ${year} ${month} ${day}`),
        Key.callback("üîô –ù–∞–∑–∞–¥", `admin_stats_exchange_year ${year} ${month}`)
    ], { columns: 1 }).inline();

    return keyboard;
}

function admin_stats_exchange_byYear_keyboard(year) {
    const keyboard = Keyboard.make([
        Key.callback("–Ø–Ω–≤", `admin_stats_exchange_year ${year} 0`),
        Key.callback("–§–µ–≤", `admin_stats_exchange_year ${year} 1`),
        Key.callback("–ú–∞—Ä—Ç", `admin_stats_exchange_year ${year} 2`),
        Key.callback("–ê–ø—Ä", `admin_stats_exchange_year ${year} 3`),
        Key.callback("–ú–∞–π", `admin_stats_exchange_year ${year} 4`),
        Key.callback("–ò—é–Ω—å", `admin_stats_exchange_year ${year} 5`),
        Key.callback("–ò—é–ª—å", `admin_stats_exchange_year ${year} 6`),
        Key.callback("–ê–≤–≥", `admin_stats_exchange_year ${year} 7`),
        Key.callback("–°–µ–Ω", `admin_stats_exchange_year ${year} 8`),
        Key.callback("–û–∫—Ç", `admin_stats_exchange_year ${year} 9`),
        Key.callback("–ù–æ—è", `admin_stats_exchange_year ${year} 10`),
        Key.callback("–î–µ–∫", `admin_stats_exchange_year ${year} 11`),
        Key.callback("üîô –ù–∞–∑–∞–¥", "admin_stats_exchange_other")
    ], { columns: 4 }).inline();

    return keyboard;
}

function admin_order_byYear_keyboard(year) {
    const keyboard = Keyboard.make([
        Key.callback("–Ø–Ω–≤", `admin_order_find_year ${year} 0`),
        Key.callback("–§–µ–≤", `admin_order_find_year ${year} 1`),
        Key.callback("–ú–∞—Ä—Ç", `admin_order_find_year ${year} 2`),
        Key.callback("–ê–ø—Ä", `admin_order_find_year ${year} 3`),
        Key.callback("–ú–∞–π", `admin_order_find_year ${year} 4`),
        Key.callback("–ò—é–Ω—å", `admin_order_find_year ${year} 5`),
        Key.callback("–ò—é–ª—å", `admin_order_find_year ${year} 6`),
        Key.callback("–ê–≤–≥", `admin_order_find_year ${year} 7`),
        Key.callback("–°–µ–Ω", `admin_order_find_year ${year} 8`),
        Key.callback("–û–∫—Ç", `admin_order_find_year ${year} 9`),
        Key.callback("–ù–æ—è", `admin_order_find_year ${year} 10`),
        Key.callback("–î–µ–∫", `admin_order_find_year ${year} 11`),
        Key.callback("üîô –ù–∞–∑–∞–¥", "admin_order_find")
    ], { columns: 4 }).inline();

    return keyboard;
}

function admin_stats_exchange_year_choose_day_keyboard(year, month) {
    var data = [];

    for (var i = 1; i <= 31; i++) {
        data.push(Key.callback(i, `admin_stats_exchange_year ${year} ${month} ${i}`))
    }

    data.push(Key.callback("üîô –ù–∞–∑–∞–¥", `admin_stats_exchange_year ${year}`));

    const keyboard = Keyboard.make(data, { columns: 5 }).inline();

    return keyboard;
}


function admin_order_year_choose_day_keyboard(year, month) {
    var data = [];

    for (var i = 1; i <= 31; i++) {
        data.push(Key.callback(i, `admin_order_find_year ${year} ${month} ${i} 0`))
    }

    data.push(Key.callback("üîô –ù–∞–∑–∞–¥", `admin_order_find_year ${year}`));

    const keyboard = Keyboard.make(data, { columns: 5 }).inline();

    return keyboard;
}

async function admin_methods_keyboard() {
    const ads = await $ad.find({ active: true });
    var data = [];

    for(const ad of ads) {
        data.push(Key.callback(ad.method, `admin_method_check ${ad.uid}`));
    }

    data.push(Key.callback("–î–æ–±–∞–≤–∏—Ç—å —Å–ø–æ—Å–æ–±", "admin_add_method"));
    data.push(Key.callback("üîô –ù–∞–∑–∞–¥", "admin"));

    const keyboard = Keyboard.make(data, { columns: 1 }).inline();

    return keyboard;
}

function admin_method_check_keyboard(ad) {
    var data = [
        Key.callback(`–†–µ–∫–≤–∏–∑–∏—Ç—ã *${ad.requisites.substr(-4)}`, `admin_ad_change_requisites ${ad.uid}`),
        Key.callback(`–ö—É—Ä—Å –ø–æ–∫—É–ø–∫–∏ ${ad.selling_rate_blockchain ? ad.selling_rate_blockchain_percent + '% ' : ' '}${ad.selling_rate}`, `admin_ad_change_selling_rate ${ad.uid}`),
        Key.callback(`–ö—É—Ä—Å –ø—Ä–æ–¥–∞–∂–∏ ${ad.buying_rate_blockchain ? ad.buying_rate_blockchain_percent + '% ' : ' '}${ad.buying_rate}`, `admin_ad_change_buying_rate ${ad.uid}`),
        Key.callback(`–ú–∏–Ω. —Å—É–º–º–∞ –ø—Ä–æ–¥–∞–∂–∏ - ${ad.buy_min} BTC`, `admin_ad_change_buy_min ${ad.uid}`),
        Key.callback(`–ú–∞–∫—Å. —Å—É–º–º–∞ –ø—Ä–æ–¥–∞–∂–∏ - ${ad.buy_max === -1 ? ad.buy_balance : (ad.buy_max > ad.buy_balance ? ad.buy_balance : ad.buy_max)} BTC`, `admin_ad_change_buy_max ${ad.uid}`),
        Key.callback(`–ú–∏–Ω. —Å—É–º–º–∞ –ø–æ–∫—É–ø–∫–∏ - ${ad.sell_min} BTC`, `admin_ad_change_sell_min ${ad.uid}`),
        Key.callback(`–ú–∞–∫—Å. —Å—É–º–º–∞ –ø–æ–∫—É–ø–∫–∏ - ${ad.sell_max} BTC`, `admin_ad_change_sell_max ${ad.uid}`)
    ];

    if (ad.sell_active) {
        data.push(
            Key.callback(`–ü–æ–∫—É–ø–∫–∞ –≤–∫–ª`, `admin_ad_sell_off ${ad.uid}`)
        )
    } else {
        data.push(
            Key.callback(`–ü–æ–∫—É–ø–∫–∞ –æ—Ç–∫–ª`, `admin_ad_sell_on ${ad.uid}`)
        )
    }

    if (ad.buy_active) {
        data.push(
            Key.callback(`–ü—Ä–æ–¥–∞–∂–∞ –≤–∫–ª`, `admin_ad_buy_off ${ad.uid}`)
        )
    } else {
        data.push(
            Key.callback(`–ü—Ä–æ–¥–∞–∂–∞ –æ—Ç–∫–ª`, `admin_ad_buy_on ${ad.uid}`)
        )
    }

    data.push(Key.callback(`–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ–±–º–µ–Ω–æ–≤`, `admin_ad_exchange_stats ${ad.uid}`));
    data.push(Key.callback(`–£–¥–∞–ª–∏—Ç—å`, `admin_ad_delete ${ad.uid}`));
    data.push(Key.callback("üîô –ù–∞–∑–∞–¥", "admin_methods"));

    const keyboard = Keyboard.make(data, { columns: 1 }).inline();
    return keyboard;
}

function admin_method_check_keyboard_limit(ad) {
    var data = [
        Key.callback(`–†–µ–∫–≤–∏–∑–∏—Ç—ã *${ad.requisites.substr(-4)}`, `admin_ad_change_requisites ${ad.uid}`),
        Key.callback(`–ö—É—Ä—Å –ø–æ–∫—É–ø–∫–∏ ${ad.selling_rate_blockchain ? ad.selling_rate_blockchain_percent + '% ' : ' '}${ad.selling_rate}`, `admin_ad_change_selling_rate ${ad.uid}`),
        Key.callback(`–ö—É—Ä—Å –ø—Ä–æ–¥–∞–∂–∏ ${ad.buying_rate_blockchain ? ad.buying_rate_blockchain_percent + '% ' : ' '}${ad.buying_rate}`, `admin_ad_change_buying_rate ${ad.uid}`),
        Key.callback(`–ú–∏–Ω. —Å—É–º–º–∞ –ø—Ä–æ–¥–∞–∂–∏ - ${ad.buy_min} BTC`, `admin_ad_change_buy_min ${ad.uid}`),
        Key.callback(`–ú–∞–∫—Å. —Å—É–º–º–∞ –ø—Ä–æ–¥–∞–∂–∏ - ${ad.buy_max === -1 ? ad.buy_balance : (ad.buy_max > ad.buy_balance ? ad.buy_balance: ad.buy_max)} BTC`, `admin_ad_change_buy_max ${ad.uid}`),
        Key.callback(`–ú–∏–Ω. —Å—É–º–º–∞ –ø–æ–∫—É–ø–∫–∏ - ${ad.sell_min} BTC`, `admin_ad_change_sell_min ${ad.uid}`),
        Key.callback(`–ú–∞–∫—Å. —Å—É–º–º–∞ –ø–æ–∫—É–ø–∫–∏ - ${ad.sell_max} BTC`, `admin_ad_change_sell_max ${ad.uid}`)
    ];

    if (ad.sell_active) {
        data.push(
            Key.callback(`–ü–æ–∫—É–ø–∫–∞ –≤–∫–ª`, `admin_ad_sell_off ${ad.uid}`)
        )
    } else {
        data.push(
            Key.callback(`–ü–æ–∫—É–ø–∫–∞ –æ—Ç–∫–ª`, `admin_ad_sell_on ${ad.uid}`)
        )
    }

    if (ad.buy_active) {
        data.push(
            Key.callback(`–ü—Ä–æ–¥–∞–∂–∞ –≤–∫–ª`, `admin_ad_buy_off ${ad.uid}`)
        )
    } else {
        data.push(
            Key.callback(`–ü—Ä–æ–¥–∞–∂–∞ –æ—Ç–∫–ª`, `admin_ad_buy_on ${ad.uid}`)
        )
    }

    data.push(Key.callback(`–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ–±–º–µ–Ω–æ–≤`, `admin_ad_exchange_stats ${ad.uid}`));
    data.push(Key.callback("–°–∫—Ä—ã—Ç—å", "close_info"));

    const keyboard = Keyboard.make(data, { columns: 1 }).inline();
    return keyboard;
}

function requisites_keyboard(ad) {
    var data = [];

    for(var i = 0;i<ad.requisites_archive.length;i++) {
        data.push(Key.callback(`${ad.requisites_archive[i]} (${ad.requisites === ad.requisites_archive[i] ? '–∞–∫—Ç–∏–≤' : '–∞—Ä—Ö–∏–≤'})`, `choose_requisite ${ad.uid} ${i}`))
    }

    data.push(Key.callback("–î–æ–±–∞–≤–∏—Ç—å —Ä–µ–∫–≤–∏–∑–∏—Ç—ã", `add_requisite ${ad.uid}`));
    data.push(Key.callback("üîô –ù–∞–∑–∞–¥", `admin_method_check ${ad.uid}`));
    const keyboard = Keyboard.make(data, { columns: 1 }).inline();
    
    return keyboard;
}

async function choose_requisite_keyboard(uid, i) {
    const ad = await $ad.findOne({ uid: uid });
    var data = [];

    if(ad.requisites === ad.requisites_archive[i]) {
        data.push(Key.callback("–ê–∫—Ç–∏–≤", `edit_requisite_off ${uid} ${i}`))
    } else {
        data.push(Key.callback("–ê—Ä—Ö–∏–≤", `edit_requisite_on ${uid} ${i}`))
        data.push(Key.callback("–£–¥–∞–ª–∏—Ç—å", `delete_requisite ${uid} ${i}`))
    }
    data.push(Key.callback("üîô –ù–∞–∑–∞–¥", `admin_ad_change_requisites ${ad.uid}`));

    const keyboard = Keyboard.make(data, { columns: 1 }).inline();
    return keyboard;
}

function rate_keyboard(purpose, uid) {
    const keyboard = Keyboard.make([
        Key.callback("–ü—Ä–æ—Ü–µ–Ω—Ç–Ω—ã–π", `admin_ad_change_${purpose}_percent ${uid}`),
        Key.callback("–§–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–π", `admin_ad_change_${purpose}_fixed ${uid}`),
        Key.callback("üîô –ù–∞–∑–∞–¥", `admin_method_check ${uid}`)
    ], { columns: 2 }).inline();

    return keyboard;
}

function yes_no_keyboard() {
    const keyboard = Keyboard.make([
        Key.callback("–î–∞", "yes"),
        Key.callback("–ù–µ—Ç", "no")
    ]).inline();

    return keyboard;
}

function max_hand_keyboard(uid) {
    const keyboard = Keyboard.make([
        Key.callback("–ú–∞–∫—Å. –±–∞–ª–∞–Ω—Å", "max"),
        Key.callback("–í—Ä—É—á–Ω—É—é", "hand"),
        Key.callback("üîô –ù–∞–∑–∞–¥", `admin_method_check ${uid}`)
    ], { columns: 2 }).inline();

    return keyboard;
}

async function get_user_keyboard(id, back) {
    const user = await $user.findOne({ id: id });

    var data = [
        Key.callback("–ü–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å", `give_amount ${id}`),
        Key.callback("–ü–æ–ª—É—á–∏—Ç—å —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã–π –æ—Ç—á—ë—Ç", `get_finance ${id}`),
        Key.callback("–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–µ—Å—Å–∏—è–º–∏", `admin_user_sessions ${id}`)
    ];

    if(user.banned) {
        data.push(Key.callback("–†–∞–∑–±–∞–Ω–∏—Ç—å", `admin_unblock ${id}`))
    } else {
        data.push(Key.callback("–ó–∞–±–∞–Ω–∏—Ç—å", `admin_block ${id}`))        
    }

    data.push(Key.callback("–ù–∞–∑–∞–¥", back))
    const keyboard = Keyboard.make(data, { columns: 1 }).inline();

    return keyboard;
}

async function admin_user_sessions_keyboard(id) {
    const user = await $user.findOne({ id: id });
    var data = [];
    for(const session of user.activeSessions) {
        data.push(Key.callback(session, `admin_cancel_session ${id} ${session}`))
    }

    data.push(Key.callback("üîô –ù–∞–∑–∞–¥", `get_user_byId ${id}`));
    const keyboard = Keyboard.make(data, { columns: 1 }).inline();

    return keyboard;
}

async function admin_more_keyboard() {
    const admin = await $admin.findOne({ uid: 0 });
    const keyboard = Keyboard.make([
        Key.callback(`–ú–∏–Ω. —Å—É–º–º–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è - ${admin.min_insert} BTC`, `admin_change_min_insert`),
        Key.callback(`–ú–∏–Ω. —Å—É–º–º–∞ –≤—ã–≤–æ–¥–∞ - ${admin.min_withdrawal} BTC`, `admin_change_min_withdrawal`),
        Key.callback(`–ö–æ–º–∏—Å—Å–∏—è –∑–∞ –≤—ã–≤–æ–¥`, "admin_withdrawal_commission"),
        Key.callback("–í–∞—É—á–µ—Ä—ã", "admin_vouchers"),
        Key.callback("–ë–æ–Ω—É—Å—ã", "admin_bonuses"),
        Key.callback("–ö–æ–º–∏—Å—Å–∏–∏ —Å–µ—Ç–∏", "admin_commission_network"),
        Key.callback("–†–∞—Å—Å—ã–ª–∫–∞", "admin_messenger"),
        Key.callback("üîô –ù–∞–∑–∞–¥", `admin`)
    ], { columns: 1 }).inline();

    return keyboard;
}

function admin_withdrawal_commission_keyboard() {
    const keyboard = Keyboard.make([
        Key.callback("–ú–µ–¥–ª–µ–Ω–Ω–∞—è", "admin_set_withdrawal_byHand 0"),
        Key.callback("–°—Ä–µ–¥–Ω—è—è", "admin_set_withdrawal_byHand 1"),
        Key.callback("–í—ã—Å–æ–∫–∞—è", "admin_set_withdrawal_byHand 2"),
        Key.callback("üîô –ù–∞–∑–∞–¥", `admin_more`)
    ], { pattern: [2,1,1] }).inline();

    return keyboard;
}

function admin_get_ad_exchange_stats_keyboard(uid, year) {
    const keyboard = Keyboard.make([
        Key.callback("–ü–æ–ª—É—á–∏—Ç—å —Ñ–∞–π–ª", `get_file_ad_exchange_stats ${uid} ${year}`),
        Key.callback("üîô –ù–∞–∑–∞–¥", `admin_ad_exchange_stats_year ${uid} ${year}`)
    ], { columns: 1 }).inline();

    return keyboard;
}

function admin_balance_keyboard() {
    const keyboard = Keyboard.make([
        Key.callback("–ü–æ–ø–æ–ª–Ω–∏—Ç—å –æ—Å–Ω. –±–∞–ª–∞–Ω—Å", "admin_add_balance"),
        Key.callback("–í—ã–≤–µ—Å—Ç–∏ —Å –æ—Å–Ω. –±–∞–ª–∞–Ω—Å–∞", "admin_withdraw_balance"),
        Key.callback("–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–∞–ª–∞–Ω—Å–æ–≤ —Å–ø–æ—Å–æ–±–æ–≤ –æ–ø–ª–∞—Ç", "admin_settings_balance"),
        Key.callback("–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è", "admin_notifications_balance"),
        Key.callback("üîô –ù–∞–∑–∞–¥", "admin")
    ], { columns: 1 }).inline();

    return keyboard;
}

function admin_add_balance_keyboard() {
    const keyboard = Keyboard.make([
        Key.callback("–£–∫–∞–∑–∞—Ç—å —Å—É–º–º—É –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è", "admin_add_balance_set"),
        Key.callback("–ü–æ–ø–æ–ª–Ω–∏—Ç—å —Å –∫–æ–º–∏—Å—Å–∏–æ–Ω–æ–≥–æ –±–∞–ª–∞–Ω—Å–∞", "admin_add_balance_commission"),
        Key.callback("–ü–æ–ø–æ–ª–Ω–∏—Ç—å —Å –±–∞–ª–∞–Ω—Å–∞ –ø—Ä–æ–¥–∞–∂", "admin_add_balance_sell"),
        Key.callback("üîô –ù–∞–∑–∞–¥", "admin_balance")
    ], { columns: 1 }).inline();

    return keyboard;
}

async function admin_add_balance_sell_keyboard() {
    const ads = await $ad.find({ active: true, buy_active: true });
    var data = [];

    for(const ad of ads) {
        data.push(Key.callback(`${ad.method} - ${ad.buy_balance} BTC`, `admin_add_balance_sell ${ad.uid}`))
    }

    data.push(Key.callback("üîô –ù–∞–∑–∞–¥", "admin_add_balance"))
    const keyboard = Keyboard.make(data, { columns: 1 }).inline();

    return keyboard;
}

async function admin_settings_balance_keyboard() {
    const ads = await $ad.find({ active: true });
    var data = [];

    for(const ad of ads) {
        data.push(Key.callback(`${ad.method} - ${ad.buy_balance} BTC`, `admin_settings_balance ${ad.uid}`))
    }

    data.push(Key.callback("üîô –ù–∞–∑–∞–¥", "admin_balance"))
    const keyboard = Keyboard.make(data, { columns: 1 }).inline();

    return keyboard;
}

function admin_settings_balance_byId_keyboard(uid) {
    const keyboard = Keyboard.make([
        Key.callback("–ü–æ–ø–æ–ª–Ω–∏—Ç—å", `admin_settings_balance_add ${uid}`),
        Key.callback("–û–±–Ω—É–ª–∏—Ç—å –±–∞–ª–∞–Ω—Å", `admin_settings_balance_remove ${uid}`),
        Key.callback("–õ–∏–º–∏—Ç —É—Ö–æ–¥–∞ –≤ –º–∏–Ω—É—Å", `admin_settings_balance_limit ${uid}`),
        Key.callback("üîô –ù–∞–∑–∞–¥", "admin_settings_balance")
    ], { pattern: [2,1,1] }).inline();

    return keyboard;
}

function admin_settings_balance_remove_keyboard(uid) {
    const keyboard = Keyboard.make([
        Key.callback("–î–∞", `admin_settings_balance_remove_done ${uid}`),
        Key.callback("–ù–µ—Ç", `admin_settings_balance ${uid}`),
        Key.callback("üîô –ù–∞–∑–∞–¥", `admin_settings_balance ${uid}`)
    ], { columns: 2 }).inline();

    return keyboard;
}

function admin_lessbalance_notifications_have_keyboard() {
    const keyboard = Keyboard.make([
        Key.callback("–£–¥–∞–ª–∏—Ç—å", "admin_delete_notification"),
        Key.callback("üîô –ù–∞–∑–∞–¥", "admin_balance")
    ], { columns: 1 }).inline();

    return keyboard;
}

function admin_lessbalance_notifications_no_keyboard() {
    const keyboard = Keyboard.make([
        Key.callback("–î–æ–±–∞–≤–∏—Ç—å", "admin_add_notification"),
        Key.callback("üîô –ù–∞–∑–∞–¥", "admin_balance")
    ], { columns: 1 }).inline();

    return keyboard;
}

function admin_settings_balance_limit_keyboard(uid) {
    const keyboard = Keyboard.make([
        Key.callback("–£–¥–∞–ª–∏—Ç—å", `admin_settings_balance_limit_remove ${uid}`),
        Key.callback("–ù–∞–∑–∞–¥", `admin_settings_balance ${uid}`)
    ], { columns: 1 }).inline();

    return keyboard;
}

async function admin_advertisement_keyboard() {
    const ads = await $advertisement.find({ active: true });

    var data = [];

    for (const ad of ads) {
        data.push(Key.callback(ad.name, `admin_check_advertisement ${ad.uid}`));
    }

    data.push(Key.callback("–î–æ–±–∞–≤–∏—Ç—å —Ä–µ—Å—É—Ä—Å", "admin_add_advertisement"));
    data.push(Key.callback("üîô –ù–∞–∑–∞–¥", "admin_stats_audience"));

    const keyboard = Keyboard.make(data, { columns: 1 }).inline();
    return keyboard;
}

function admin_check_advertisement_keyboard(uid) {
    const keyboard = Keyboard.make([
        Key.callback("–ò–∑–º–µ–Ω–∏—Ç—å –¥–∞—Ç—É –≤—ã—Ö–æ–¥–∞ —Ä–µ–∫–ª–∞–º—ã", `admin_advertisement_edit_time ${uid}`),
        Key.callback("–ë–æ–Ω—É—Å", `admin_advertisement_bonus ${uid}`),
        Key.callback("–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", `admin_advertisement_stats ${uid}`),
        Key.callback("–£–¥–∞–ª–∏—Ç—å", `admin_advertisement_delete ${uid}`),
        Key.callback("üîô –ù–∞–∑–∞–¥", "admin_advertisement")
    ], { columns: 1 }).inline();

    return keyboard;
}

async function admin_advertisement_bonus_keyboard(uid) {
    const ad = await $advertisement.findOne({ uid: uid });

    var keyboard;

    if (ad.bonus.length !== 0) {
        keyboard = Keyboard.make([
            Key.callback("–£–¥–∞–ª–∏—Ç—å –±–æ–Ω—É—Å", `admin_advertisement_bonus_delete ${uid}`),
            Key.callback("üîô –ù–∞–∑–∞–¥", `admin_check_advertisement ${uid}`)
        ], { columns: 1 }).inline();
    } else {
        keyboard = Keyboard.make([
            Key.callback("–î–æ–±–∞–≤–∏—Ç—å –±–æ–Ω—É—Å", `admin_advertisement_bonus_add ${uid}`),
            Key.callback("üîô –ù–∞–∑–∞–¥", `admin_check_advertisement ${uid}`)
        ], { columns: 1 }).inline();
    }

    return keyboard;
}

function admin_add_advertisement_scene_keyboard() {
    const keyboard = Keyboard.make([
        Key.callback("–í—Å–µ –≤–µ—Ä–Ω–æ!", "ok"),
        Key.callback("–ù–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ", "cancel"),
        Key.callback("üîô –ù–∞–∑–∞–¥", "back")
    ], { columns: 2 }).inline();

    return keyboard;
}

function admin_bonus_keyboard() {
    const keyboard = Keyboard.make([
        Key.callback("–ü–æ –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º", "admin_bonus_all_users"),
        Key.callback("–ü–æ Bot user_id", "admin_bonus_by_userId"),
        Key.callback("–ü–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É —Å–¥–µ–ª–æ–∫", "admin_bonus_by_countDeals"),
        Key.callback("–ü–æ —Å—É–º–º–µ —Å–¥–µ–ª–æ–∫", "admin_bonus_by_amountDeals"),
        Key.callback("üîô –ù–∞–∑–∞–¥", "admin_more")
    ], { columns: 1 }).inline();

    return keyboard;
}

function admin_bonus_delete_keyboard(uid) {
    const keyboard = Keyboard.make([
        Key.callback("–£–¥–∞–ª–∏—Ç—å –±–æ–Ω—É—Å", `admin_delete_bonus ${uid}`)
    ], { columns: 1 }).inline();

    return keyboard;
}

function admin_bonus_by_userId_scene_bonusYes_keyboard() {
    const keyboard = Keyboard.make([
        Key.callback("–£–¥–∞–ª–∏—Ç—å –±–æ–Ω—É—Å", "delete"),
        Key.callback("üîô –ù–∞–∑–∞–¥", "back")
    ], { columns: 1 }).inline();

    return keyboard;
}

function admin_delete_bonus_keyboard(uid) {
    const keyboard = Keyboard.make([
        Key.callback("–î–∞", `admin_delete_bonus_ok ${uid}`),
        Key.callback("–ù–µ—Ç", "close_info")
    ]).inline();

    return keyboard;
}

function admin_vouchers_keyboard() {
    const keyboard = Keyboard.make([
        Key.callback("–ü–æ –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º", "admin_vouchers_all_users"),
        Key.callback("–ü–æ Bot user_id", "admin_vouchers_by_userId"),
        Key.callback("–ü–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É —Å–¥–µ–ª–æ–∫", "admin_vouchers_by_countDeals"),
        Key.callback("–ü–æ —Å—É–º–º–µ —Å–¥–µ–ª–æ–∫", "admin_vouchers_by_amountDeals"),
        Key.callback("üîô –ù–∞–∑–∞–¥", "admin_more")
    ], { columns: 1 }).inline();

    return keyboard;
}

function admin_voucher_delete_keyboard(uid) {
    const keyboard = Keyboard.make([
        Key.callback("–£–¥–∞–ª–∏—Ç—å –≤–∞—É—á–µ—Ä", `admin_delete_voucher ${uid}`)
    ], { columns: 1 }).inline();

    return keyboard;
}


function admin_delete_voucher_keyboard(uid) {
    const keyboard = Keyboard.make([
        Key.callback("–î–∞", `admin_delete_voucher_ok ${uid}`),
        Key.callback("–ù–µ—Ç", "close_info")
    ]).inline();

    return keyboard;
}

function admin_commission_network_keyboard() {
    const keyboard = Keyboard.make([
        Key.callback("–ö–æ–º–∏—Å—Å–∏—è –∑–∞ –≤—ã–≤–æ–¥", "admin_commission_withdrawal"),
        Key.callback("–ö–æ–º–∏—Å—Å–∏—è –ø—Ä–∏ –ø—Ä–æ–¥–∞–∂–µ", "admin_commission_sell"),
        Key.callback("üîô –ù–∞–∑–∞–¥", "admin_more")
    ], { columns: 1 }).inline();

    return keyboard;
}

function admin_ad_exchange_24hours_keyboard(uid) {
    const keyboard = Keyboard.make([
        Key.callback("–î—Ä—É–≥–∏–µ –¥–∞—Ç—ã", `admin_ad_exchange_stats_go ${uid}`),
        Key.callback("üîô –ù–∞–∑–∞–¥", `admin_method_check ${uid}`)
    ], { columns: 1 }).inline();

    return keyboard;

}
async function admin_ad_exchange_stats_keyboard(uid) {
    const deals = await $deal.find({ ad_uid: uid });

    var text = [];
    var data = [];

    for (const deal of deals) {
        var year = moment(deal.created_at).year();

        if (!text.includes(year)) {
            text.push(year);
        }
    }

    for (const elem of text) {
        data.push(Key.callback(elem, `admin_ad_exchange_stats_year ${uid} ${year}`))
    }

    data.push(Key.callback("üîô –ù–∞–∑–∞–¥", `admin_ad_exchange_stats ${uid}`));
    const keyboard = Keyboard.make(data, { columns: 2 }).inline();

    return keyboard;
}

function admin_ad_exchange_stats_byYear_keyboard(uid, year) {
    const keyboard = Keyboard.make([
        Key.callback("–Ø–Ω–≤", `admin_ad_exchange_stats_year ${uid} ${year} 0`),
        Key.callback("–§–µ–≤", `admin_ad_exchange_stats_year ${uid} ${year} 1`),
        Key.callback("–ú–∞—Ä—Ç", `admin_ad_exchange_stats_year ${uid} ${year} 2`),
        Key.callback("–ê–ø—Ä", `admin_ad_exchange_stats_year ${uid} ${year} 3`),
        Key.callback("–ú–∞–π", `admin_ad_exchange_stats_year ${uid} ${year} 4`),
        Key.callback("–ò—é–Ω—å", `admin_ad_exchange_stats_year ${uid} ${year} 5`),
        Key.callback("–ò—é–ª—å", `admin_ad_exchange_stats_year ${uid} ${year} 6`),
        Key.callback("–ê–≤–≥", `admin_ad_exchange_stats_year ${uid} ${year} 7`),
        Key.callback("–°–µ–Ω", `admin_ad_exchange_stats_year ${uid} ${year} 8`),
        Key.callback("–û–∫—Ç", `admin_ad_exchange_stats_year ${uid} ${year} 9`),
        Key.callback("–ù–æ—è", `admin_ad_exchange_stats_year ${uid} ${year} 10`),
        Key.callback("–î–µ–∫", `admin_ad_exchange_stats_year ${uid} ${year} 11`),
        Key.callback("üîô –ù–∞–∑–∞–¥", `admin_ad_exchange_stats_go ${uid}`)
    ], { columns: 4 }).inline();

    return keyboard;
}

function admin_commission_withdrawal_keyboard() {
    const keyboard = Keyboard.make([
        Key.callback("–ú–µ–¥–ª–µ–Ω–Ω–∞—è", `admin_commission_withdrawal 0`),
        Key.callback("–°—Ä–µ–¥–Ω—è—è", `admin_commission_withdrawal 1`),
        Key.callback("–í—ã—Å–æ–∫–∞—è", `admin_commission_withdrawal 2`),
        Key.callback("üîô –ù–∞–∑–∞–¥", "admin_commission_network")
    ], { pattern: [2,1,1] }).inline();

    return keyboard;
}

function admin_commission_sell_keyboard() {
    const keyboard = Keyboard.make([
        Key.callback("–û—Ç 0 –¥–æ 2000‚ÇΩ", `admin_commission_sell 0`),
        Key.callback("–û—Ç 2000‚ÇΩ –¥–æ 5000‚ÇΩ", `admin_commission_sell 1`),
        Key.callback("–û—Ç 5000‚ÇΩ –¥–æ 20000‚ÇΩ", `admin_commission_sell 2`),
        Key.callback("–ë–æ–ª–µ–µ 20000‚ÇΩ", `admin_commission_sell 3`),
        Key.callback("üîô –ù–∞–∑–∞–¥", "admin_commission_network")
    ], { columns: 1 }).inline();

    return keyboard;
}
module.exports = {
    go_to_main_keyboard,
    back_keyboard,
    main_keyboard,
    more_keyboard,
    balance_keyboard,
    profile_keyboard,
    insert_keyboard,
    banned_keyboard,
    set_password_keyboard,
    set_password_scene_generate_password,
    revoke_session_keyboard,
    change_password_keyboard,
    cancel_session_keyboard,
    cancel_session_change_password_keyboard,
    cancel_session_error_keyboard,
    sessions_list_keyboard,
    sign_out_keyboard,
    get_ads_keyboard,
    check_deal_keyboard,
    open_deals_keyboard,
    deal_more_keyboard,
    deal_scene_keyboard,
    cheque_keyboard,
    create_cheque_keyboard,
    my_active_cheques_keyboard,
    delete_cheque_request_keyboard,
    agent_support_keyboard,
    transfer_done_keyboard,
    withdrawal_max_keyboard,
    admin_i_see_keyboard,
    admin_keyboard,
    requisites_keyboard,
    choose_requisite_keyboard,
    deal_paid_keyboard,
    deal_cancel_keyboard,
    admin_check_order_keyboard,
    admin_stats_keyboard,
    admin_stats_users_keyboard,
    admin_stats_exchange_keyboard,
    admin_stats_audience_keyboard,
    admin_stats_registration_keyboard,
    admin_stats_registration_byYear_keyboard,
    get_all_users_keyboard,
    admin_get_file_all_users_keyboard,
    admin_stats_exchange_other_keyboard,
    admin_stats_exchange_byYear_keyboard,
    admin_get_file_deal_byYear_keyboard,
    admin_methods_keyboard,
    admin_method_check_keyboard,
    admin_method_check_keyboard_limit,
    rate_keyboard,
    yes_no_keyboard,
    max_hand_keyboard,
    get_user_keyboard,
    withdrawal_scene_ask_speed_keyboard,
    admin_order_keyboard,
    admin_order_transfer_done_keyboard,
    admin_order_done_keyboard,
    admin_order_find_keyboard,
    admin_order_byYear_keyboard,
    admin_order_year_choose_day_keyboard,
    admin_order_cancel_keyboard,
    admin_user_sessions_keyboard,
    admin_more_keyboard,
    admin_withdrawal_commission_keyboard,
    admin_get_ad_exchange_stats_keyboard,
    admin_balance_keyboard,
    admin_add_balance_keyboard,
    admin_add_balance_sell_keyboard,
    admin_settings_balance_keyboard,
    admin_settings_balance_byId_keyboard,
    admin_settings_balance_remove_keyboard,
    admin_lessbalance_notifications_have_keyboard,
    admin_lessbalance_notifications_no_keyboard,
    admin_settings_balance_limit_keyboard,
    admin_advertisement_keyboard,
    admin_check_advertisement_keyboard,
    admin_advertisement_bonus_keyboard,
    admin_add_advertisement_scene_keyboard,
    admin_bonus_keyboard,
    admin_bonus_delete_keyboard,
    admin_bonus_by_userId_scene_bonusYes_keyboard,
    admin_delete_bonus_keyboard,
    admin_vouchers_keyboard,
    admin_voucher_delete_keyboard,
    admin_delete_voucher_keyboard,
    admin_commission_network_keyboard,
    admin_ad_exchange_stats_keyboard,
    admin_ad_exchange_stats_byYear_keyboard,
    admin_stats_exchange_year_choose_day_keyboard,
    admin_ad_exchange_24hours_keyboard,
    admin_commission_withdrawal_keyboard,
    admin_commission_sell_keyboard
}