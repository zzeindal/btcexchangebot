const cron = require('node-cron');
const { $ad, $admin, $bonus, $voucher, $deal, $user } = require('../connection/mongoose');
const { bot, NPApi } = require('../connection/telegram');
const { admin_chat, btc_convert, statuses, saveIncome, split_number } = require('./utils');
const moment = require("moment");
const { admin_i_see_keyboard } = require('./keyboards');

cron.schedule('* * * * * *', async () => {
    const rub = await btc_convert(1);
    const ads = await $ad.find({ active: true, });

    for (const ad of ads) {
        if(ad.selling_rate_blockchain) {
            if(ad.selling_rate_blockchain_percent < 0) {
                await ad.set("selling_rate", rub - rub*(0-ad.selling_rate_blockchain_percent)/100);
            } else {
                await ad.set("selling_rate", rub + ((rub * ad.selling_rate_blockchain_percent) /100));
            }
        } 
        if(ad.buying_rate_blockchain) {
            if(ad.buying_rate_blockchain_percent < 0) {
                await ad.set("buying_rate", rub - rub*(0-ad.buying_rate_blockchain_percent)/100);
            } else {
                await ad.set("buying_rate", rub + ((rub * ad.buying_rate_blockchain_percent) /100));
            }
        }

        /*if (ad.buy_max > (ad.buy_balance + ad.balance_limit)) {
            await ad.set("buy_max", ad.buy_balance + ad.balance_limit);
        }*/

        if (ad.buy_active && (ad.buy_balance + ad.balance_limit) <= 0) {
            await ad.set("buy_active", false);
        }
    }


});

cron.schedule('*/15 * * * *', async () => {
    const ads = await $ad.find({ active: true, });
    const admin = await $admin.findOne({ uid: 0 });

    for (const ad of ads) {
        if (admin.lessbalance_notifications[0] > ad.buy_balance) {
            await bot.telegram.sendMessage(admin_chat, `
‚ùó–í–ù–ò–ú–ê–ù–ò–ï! –£–í–ê–ì–ê! ATTENTION! DIQQAT! –ó–∞–∫–∞–Ω—á–∏–≤–∞—é—Ç—Å—è –¥–µ–Ω—å–≥–∏ –Ω–∞ —Å–ø–æ—Å–æ–±–µ –æ–ø–ª–∞—Ç—ã ${ad.method}. –°—Ä–æ—á–Ω–æ –ø–æ–ø–æ–ª–Ω–∏—Ç–µ –±–∞–ª–∞–Ω—Å —Å–ø–æ—Å–æ–±–∞ –æ–ø–ª–∞—Ç—ã!
@iron_flash
@bdhmj
@IronTim
@BolshushiyDyadyaMalchik`)
        }
    }
});



cron.schedule('*/5 * * * *', async () => {
    const users = await $user.find();

    const now = moment(new Date());

    for (const user of users) {
        for (const bonus of user.bonus) {
            const end = moment(bonus.finished_date);
            const duration = moment.duration(end.diff(now));
            const minutes = duration.asMinutes();
            if (minutes <= 0 || bonus.limit <= 0 || bonus.percent <= 0) {
                user.bonus.pop();

                await user.save();
            }
        }

        for (var i = 0; i < user.vouchers.length;i++) {
            const end = moment(user.vouchers[i].finished_date);
            const duration = moment.duration(end.diff(now));
            const minutes = duration.asMinutes();
            if (minutes <= 0 || user.vouchers[i].count <= 0) {
                user.vouchers.splice(i, 1);
                await user.save();
            }
        }
    }

    const bonuses = await $bonus.find({ active: true });
    for (const bonus of bonuses) {
        const end = moment(bonus.finished_date);
        const duration = moment.duration(end.diff(now));
        const minutes = duration.asMinutes();

        if (minutes <= 0) {
            await bonus.set("active", false);
        }
    }

    const vouchers = await $voucher.find({ active: true });
    for (const voucher of vouchers) {
        const end = moment(voucher.finished_date);
        const duration = moment.duration(end.diff(now));
        const minutes = duration.asMinutes();

        if (minutes <= 0) {
            await voucher.set("active", false);
        }
    }

    const result = await bot.telegram.getChatAdministrators(admin_chat);
    const admin = await $admin.findOne({ uid: 0 });

    for (const data of result) {
        if (!admin.admins.includes(data.user.id)) {
            admin.admins.push(data.user.id);
        }
    }

    await admin.save();
});

cron.schedule('*/5 * * * *', async () => {
    const now = moment().format();

    // —É–¥–∞–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —Ä–∞–∑–¥–µ–ª–µ –≤–Ω–µ—Å—Ç–∏ –ø–æ—Å–ª–µ 23 —á
    const users = await $user.find();
    for (const user of users) {
        if (user.message_for_delete_date && user.message_for_delete_date!=="-") {
            const end = moment(user.message_for_delete_date).add(23, 'hours');
            const duration = moment.duration(end.diff(now));
            const minutes = duration.asMinutes();
            if (minutes <= 0) {
                try {
                    await bot.telegram.deleteMessage(user.message_for_delete_ownerId, user.message_for_delete)
                } catch (err) { };

                await user.set("message_for_delete_date", "-");
            }
        }
    }

    const deals = await $deal.find();
    for (const deal of deals) {
        if (deal.status === 0 && deal.method === "buy") {
            const end = moment(deal.created_at).add(30, 'minutes');
            const duration = moment.duration(end.diff(now));
            const minutes = duration.asMinutes();
            const ad = await $ad.findOne({ uid: deal.ad_uid });
            if (minutes <= 0) {
                await bot.telegram.sendMessage(deal.senderId, `‚õîÔ∏è <b>–°–¥–µ–ª–∫–∞ ‚Ññ${deal.uid} –æ—Ç–º–µ–Ω–µ–Ω–∞ –≤ —Å–≤—è–∑–∏ —Å –∏—Å—Ç–µ—á–µ–Ω–∏–µ–º –≤—Ä–µ–º–µ–Ω–∏ –Ω–∞ –æ–ø–ª–∞—Ç—É</b>`, { parse_mode: "HTML" });
                await deal.set("status", 4);
                await deal.set("finished", moment().format())
                await deal.set("why_canceled", "–í—Ä–µ–º—è –∏—Å—Ç–µ–∫–ª–æ");
                await bot.telegram.sendMessage(deal.senderId, `
üìãüìå <b>–°–¥–µ–ª–∫–∞ ‚Ññ${deal.uid}</b>

<b>–°—Ç–∞—Ç—É—Å:</b> ${statuses[deal.status]}
<b>–ü—Ä–∏—á–∏–Ω–∞ –æ—Ç–º–µ–Ω—ã:</b> ${deal.why_canceled}

<b>–°–æ–∑–¥–∞–Ω–∞:</b> ${moment(deal.created_at).format('MMMM Do YYYY, HH: mm')} (–ú–°–ö)
<b>–ó–∞–≤–µ—Ä—à–µ–Ω–∞:</b> ${moment(deal.finished).format('MMMM Do YYYY, HH: mm')} (–ú–°–ö)
<b>–°—É–º–º–∞ –ø–æ–∫—É–ø–∫–∏:</b> ${deal.amount} BTC
<b>–°—É–º–º–∞ –∫ –æ–ø–ª–∞—Ç–µ:</b> ${deal.amount_in_rub} RUB

<b>–†–µ–∫–≤–∏–∑–∏—Ç—ã –¥–ª—è –æ–ø–ª–∞—Ç—ã:</b> 
    ${ad.method}
    <code>${ad.requisites}</code>`, { parse_mode: "HTML" });
            }
        }
        if (deal.status === 0 && deal.method === "sell") {
            const end = moment(deal.created_at).add(60, 'minutes');
            const duration = moment.duration(end.diff(now));
            const minutes = duration.asMinutes();

            if (minutes <= 0) {
                await bot.telegram.sendMessage(deal.senderId, `<b>–°–¥–µ–ª–∫–∞ ‚Ññ${deal.uid} –æ—Ç–º–µ–Ω–µ–Ω–∞ –≤ —Å–≤—è–∑–∏ —Å –∏—Å—Ç–µ—á–µ–Ω–∏–µ–º –≤—Ä–µ–º–µ–Ω–∏ –Ω–∞ –æ–ø–ª–∞—Ç—É</b>`, { parse_mode: "HTML" });
                await deal.set("status", 4);
                await deal.set("finished", moment().format());
                await deal.set("why_canceled", "–í—Ä–µ–º—è –∏—Å—Ç–µ–∫–ª–æ");
                await bot.telegram.sendMessage(deal.senderId, `
<b>üìãüìå –°–¥–µ–ª–∫–∞ ‚Ññ${deal.uid}</b>

<b>–°—Ç–∞—Ç—É—Å:</b> ${statuses[deal.status]}
<b>–ü—Ä–∏—á–∏–Ω–∞ –æ—Ç–º–µ–Ω—ã:</b> ${deal.why_canceled}

<b>–°–æ–∑–¥–∞–Ω–∞:</b> ${moment(deal.created_at).format('MMMM Do YYYY, HH: mm')} (–ú–°–ö)
<b>–ó–∞–≤–µ—Ä—à–µ–Ω–∞:</b> ${moment(deal.finished).format('MMMM Do YYYY, HH: mm')} (–ú–°–ö)
<b>–°—É–º–º–∞ –ø—Ä–æ–¥–∞–∂–∏:</b> ${deal.amount} BTC

<b>–†–µ–∫–≤–∏–∑–∏—Ç—ã –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞:</b> ${deal.payment_btc_address}

<b>–†–µ–∫–≤–∏–∑–∏—Ç—ã –¥–ª—è –æ–ø–ª–∞—Ç—ã:</b> ${ad.method}
  ${deal.requisites}`, { parse_mode: "HTML" });
            }
        }
    }
});



//cron.schedule('*/1 * * * *', async () => {
/*
    const deals = await $deal.find({ method: "sell", status: 5 });
    for (const deal of deals) {
        const result = await NPApi.getPaymentStatus({
            payment_id: deal.payment_id
        })

        if (result.payment_status === "finished" || result.payment_status === "sending") {
            const ad = await $ad.findOne({ uid: deal.ad_uid });

            if (result.actually_paid > deal.amount) {
                await deal.set("status", 4);
                await deal.set("why_canceled", "–ù–µ–≤–µ—Ä–Ω–∞—è —Å—É–º–º–∞. –î–µ–Ω—å–≥–∏ –∑–∞—á–∏—Å–ª–µ–Ω—ã –Ω–∞ –±–∞–ª–∞–Ω—Å.");
                await deal.set("finished", moment().format());

                const user = await $user.findOne({ id: deal.ownerId });
                await user.inc("balance", result.actually_paid);
                await deal.set("user_balance", user.balance);

                const rub = await btc_convert(result.actually_paid);

                const uid = await saveIncome(user.id, result.actually_paid, rub, deal.payment_btc_address);
                await bot.telegram.sendMessage(deal.senderId, `
<b>‚õîÔ∏è –°–¥–µ–ª–∫–∞ ‚Ññ${deal.uid} –æ—Ç–º–µ–Ω–µ–Ω–∞.
–í—ã –æ—Ç–ø—Ä–∞–≤–∏–ª–∏ –Ω–∞ —É–∫–∞–∑–∞–Ω–Ω—ã–π –∞–¥—Ä–µ—Å –Ω–µ–≤–µ—Ä–Ω—É—é —Å—É–º–º—É. –í–∞—à–µ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞—á–∏—Å–ª–µ–Ω–æ –Ω–∞ –≤–∞—à –±–∞–ª–∞–Ω—Å. –í—ã –º–æ–∂–µ—Ç–µ —Å–æ–∑–¥–∞—Ç—å —Å–¥–µ–ª–∫—É –∑–∞–Ω–æ–≤–æ, —É–∫–∞–∑–∞–≤ –≤ –∫–∞—á–µ—Å—Ç–≤–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∞ –ø—Ä–æ–¥–∞–∂–∏ –±–∞–ª–∞–Ω—Å –±–æ—Ç–∞.</b>
`, { parse_mode: "HTML" });

                await bot.telegram.sendMessage(user.id, `
<b>–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ</b> #${uid} <b>–ø–æ—Å—Ç—É–ø–∏–ª–æ!</b>
–í–∞—à –±–∞–ª–∞–Ω—Å <b>–ø–æ–ø–æ–ª–Ω–µ–Ω</b> –Ω–∞ ${result.actually_paid.toFixed(10)} BTC (–ø—Ä–∏–º–µ—Ä–Ω–æ ${split_number(`${rub.toFixed(2)}`)} RUB).`, { parse_mode: "HTML" });
            } else if (result.actually_paid === deal.amount) {
                await deal.set("status", 2);

                await bot.telegram.sendMessage(ad.adminChat, `üîµ –ù–æ–≤–∞—è —Å–¥–µ–ª–∫–∞ –Ω–∞ –ø–æ–∫—É–ø–∫—É #${deal.uid}`, { reply_markup: admin_i_see_keyboard().reply_markup });
            } else {
                await deal.set("status", 4);
                await deal.set("why_canceled", "–ù–µ–≤–µ—Ä–Ω–∞—è —Å—É–º–º–∞. –î–µ–Ω—å–≥–∏ –∑–∞—á–∏—Å–ª–µ–Ω—ã –Ω–∞ –±–∞–ª–∞–Ω—Å.")
                await deal.set("finished", moment().format());

                const user = await $user.findOne({ id: deal.ownerId });
                await user.inc("balance", result.actually_paid);
                await deal.set("user_balance", user.balance);

                const rub = await btc_convert(result.actually_paid);

                const uid = await saveIncome(user.id, result.actually_paid, rub, deal.payment_btc_address);
                await bot.telegram.sendMessage(deal.senderId, `
<b>‚õîÔ∏è –°–¥–µ–ª–∫–∞ ‚Ññ${deal.uid} –æ—Ç–º–µ–Ω–µ–Ω–∞.
–í—ã –æ—Ç–ø—Ä–∞–≤–∏–ª–∏ –Ω–∞ —É–∫–∞–∑–∞–Ω–Ω—ã–π –∞–¥—Ä–µ—Å –Ω–µ–≤–µ—Ä–Ω—É—é —Å—É–º–º—É. –í–∞—à–µ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞—á–∏—Å–ª–µ–Ω–æ –Ω–∞ –≤–∞—à –±–∞–ª–∞–Ω—Å. –í—ã –º–æ–∂–µ—Ç–µ —Å–æ–∑–¥–∞—Ç—å —Å–¥–µ–ª–∫—É –∑–∞–Ω–æ–≤–æ, —É–∫–∞–∑–∞–≤ –≤ –∫–∞—á–µ—Å—Ç–≤–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∞ –ø—Ä–æ–¥–∞–∂–∏ –±–∞–ª–∞–Ω—Å –±–æ—Ç–∞.</b>
`, { parse_mode: "HTML" });

                await bot.telegram.sendMessage(user.id, `
<b>–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ</b> #${uid} <b>–ø–æ—Å—Ç—É–ø–∏–ª–æ!</b>
–í–∞—à –±–∞–ª–∞–Ω—Å <b>–ø–æ–ø–æ–ª–Ω–µ–Ω</b> –Ω–∞ ${result.actually_paid.toFixed(10)} BTC (–ø—Ä–∏–º–µ—Ä–Ω–æ ${split_number(`${rub.toFixed(2)}`)} RUB).`, { parse_mode: "HTML" });
            }
        }

        if (result.payment_status === "expired") {
            const ad = await $ad.findOne({ uid: deal.ad_uid })
            await deal.set("status", 4);
            await deal.set("why_canceled", "–ù–µ—Ç –æ–ø–ª–∞—Ç—ã");
            await deal.set("finished", moment().format());

            await bot.telegram.sendMessage(deal.senderId, `
<b>üìãüìå –°–¥–µ–ª–∫–∞ ‚Ññ${deal.uid}</b>

<b>–°—Ç–∞—Ç—É—Å:</b> ${statuses[deal.status]}
<b>–ü—Ä–∏—á–∏–Ω–∞ –æ—Ç–º–µ–Ω—ã:</b> ${deal.why_canceled}

<b>–°–æ–∑–¥–∞–Ω–∞:</b> ${moment(deal.created_at).format('MMMM Do YYYY, HH: mm')} (–ú–°–ö)
<b>–ó–∞–≤–µ—Ä—à–µ–Ω–∞:</b> ${moment(deal.finished).format('MMMM Do YYYY, HH: mm')} (–ú–°–ö)
<b>–°—É–º–º–∞ –ø—Ä–æ–¥–∞–∂–∏:</b> ${deal.amount} BTC

<b>–†–µ–∫–≤–∏–∑–∏—Ç—ã –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞:</b> ${deal.payment_btc_address}

<b>–†–µ–∫–≤–∏–∑–∏—Ç—ã –¥–ª—è –æ–ø–ª–∞—Ç—ã:</b> ${ad.method}
  ${deal.requisites}`, { parse_mode: "HTML" });
        }
    }


    // –ø—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ –∑–∞—è–≤–∫–∏ –ø—Ä–æ–¥–∞–∂, –∫–æ–≥–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–µ—Ä–µ–≤–µ–ª, –Ω–æ –Ω–µ –Ω–∞–∂–∞–ª –Ω–∞ –æ–ø–ª–∞—á–µ–Ω–æ
    const no_done_deals = await $deal.find({ method: "sell", status: 0 });

    for (const deal of no_done_deals) {
        const result = await NPApi.getPaymentStatus({
            payment_id: deal.payment_id
        })
        
        if (result.payment_status === "finished" || result.payment_status === "sending") {
            const admin = await $admin.findOne({ uid: 0 });
            if (result.actually_paid >= admin.min_insert) {
                await deal.set("status", 4);
                await deal.set("why_canceled", "–ù–µ–≤–µ—Ä–Ω–∞—è —Å—É–º–º–∞. –î–µ–Ω—å–≥–∏ –∑–∞—á–∏—Å–ª–µ–Ω—ã –Ω–∞ –±–∞–ª–∞–Ω—Å.");
                await deal.set("finished", moment().format());

                const user = await $user.findOne({ id: deal.ownerId });
                await user.inc("balance", result.actually_paid);
                await deal.set("user_balance", user.balance);

                const rub = await btc_convert(result.actually_paid);

                const uid = await saveIncome(user.id, result.actually_paid, rub, deal.payment_btc_address);
                await bot.telegram.sendMessage(deal.senderId, `
<b>‚õîÔ∏è –°–¥–µ–ª–∫–∞ ‚Ññ${deal.uid} –æ—Ç–º–µ–Ω–µ–Ω–∞.
–í—ã –æ—Ç–ø—Ä–∞–≤–∏–ª–∏ –Ω–∞ —É–∫–∞–∑–∞–Ω–Ω—ã–π –∞–¥—Ä–µ—Å –Ω–µ–≤–µ—Ä–Ω—É—é —Å—É–º–º—É. –í–∞—à–µ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞—á–∏—Å–ª–µ–Ω–æ –Ω–∞ –≤–∞—à –±–∞–ª–∞–Ω—Å. –í—ã –º–æ–∂–µ—Ç–µ —Å–æ–∑–¥–∞—Ç—å —Å–¥–µ–ª–∫—É –∑–∞–Ω–æ–≤–æ, —É–∫–∞–∑–∞–≤ –≤ –∫–∞—á–µ—Å—Ç–≤–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∞ –ø—Ä–æ–¥–∞–∂–∏ –±–∞–ª–∞–Ω—Å –±–æ—Ç–∞.</b>
`, { parse_mode: "HTML" });

                await bot.telegram.sendMessage(user.id, `
<b>–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ</b> #${uid} <b>–ø–æ—Å—Ç—É–ø–∏–ª–æ!</b>
–í–∞—à –±–∞–ª–∞–Ω—Å <b>–ø–æ–ø–æ–ª–Ω–µ–Ω</b> –Ω–∞ ${result.actually_paid.toFixed(10)} BTC (–ø—Ä–∏–º–µ—Ä–Ω–æ ${split_number(`${rub.toFixed(2)}`)} RUB).`, { parse_mode: "HTML" });
            }
        }
    }

});
*/